name: CI

on: [push, pull_request]

jobs:
  rustfmt:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - run: cargo fmt --all -- --check

  ubuntu:
    needs: [rustfmt]
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-20.04']
    services:
      trextestdb:
        image: sourcepole/trextestdb
        ports:
          - 5439:5432

    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install libgdal-dev
        run: sudo apt install -y libgdal-dev

      - name: Cargo build
        run: cargo build --all-features
      - run: ldd target/debug/t_rex

      - name: Execute tests
        run: cargo test --all-features --all --no-fail-fast

      - name: Execute DB tests
        run: cargo test --all-features --all --no-fail-fast -- --ignored
        env:
          DBCONN: "postgresql://t_rex:t_rex@127.0.0.1:5439/t_rex_tests"

  macos:
    needs: [rustfmt]
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['macOS-latest']

    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # - name: Execute tests
      #   run: cargo test ${{ matrix.features }} --all --no-fail-fast
      # Builds also t-rex-gdal, so we test each workspace
      - run: cargo test --no-default-features --no-fail-fast
      - run: cd tile-grid && cargo test --no-default-features --no-fail-fast
      - run: cd t-rex-core && cargo test --no-default-features --no-fail-fast
      # - run: cd t-rex-service && cargo test --no-default-features --no-fail-fast
      # - run: cd t-rex-webserver && cargo test --no-default-features --no-fail-fast

      # - run: otool -L target/debug/t_rex

  deb:
    needs: [ubuntu]
    name: Build deb package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-20.04']

    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install libgdal-dev
        run: sudo apt install -y libgdal-dev

      - run: cargo install cargo-deb
      - run: cargo deb
      - run: dpkg -I target/debian/t-rex_*.deb
      - run: dpkg -c target/debian/t-rex_*.deb

  # See also https://github.com/FedericoPonzi/rust-ci/blob/master/.github/workflows/CI.yml

  # package:
  #   case $TRAVIS_OS_NAME in
  #       linux)
  #           stage=$(mktemp -d)
  #           ;;
  #       osx)
  #           stage=$(mktemp -d -t tmp)
  #           ;;
  #   esac

  #   test -f Cargo.lock || cargo generate-lockfile

  #   cargo rustc --bin t_rex --target $TARGET --release -- -C lto

  #   cp target/$TARGET/release/t_rex $stage/

  #   cd $stage
  #   tar czf $src/$CRATE_NAME-$TRAVIS_TAG-$TARGET.tar.gz *


  #   # Build Docker container
  #   cd $src/packaging/docker
  #   cp $src/$CRATE_NAME-$TRAVIS_TAG-$TARGET.deb .
  #   docker build -t sourcepole/t-rex -f Dockerfile .
  #   docker run sourcepole/t-rex --version

  #   docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
  #   docker push sourcepole/t-rex
  #   docker tag sourcepole/t-rex sourcepole/t-rex:${TRAVIS_TAG#v}
  #   docker push sourcepole/t-rex:${TRAVIS_TAG#v}
