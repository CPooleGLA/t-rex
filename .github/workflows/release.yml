name: release

on: [push]

# on:
#   workflow_run:
#     workflows: ["CI"]
#     branches: [ci]
#     types: 
#       - completed

# tagcheck:
#   release:
#     name: check tag
#       if:
#         - ${{ github.event.workflow_run.conclusion == 'success' }}
#         - startsWith(github.ref, 'refs/tags/')

jobs:
  release:
    name: build release
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    # if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy: 
      matrix:
        target: [x86_64-unknown-linux-gnu]
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --no-default-features --target ${{ matrix.target }}

      - name: Package
        shell: bash
        run: |
          # TODO:
          # strip target/${{ matrix.target }}/release/t-rex
          cd target/${{ matrix.target }}/release          
          # UPDATEME: replace the string "t-rex" with your binary's name.
          tar czvf ../../../t-rex-${{ matrix.target }}.tar.gz t_rex
          cd -
          tar tzf t-rex-${{ matrix.target }}.tar.gz
          
      # - name: Publish
      #   uses: softprops/action-gh-release@v1
      #   # TODO: if any of the build step fails, the release should be deleted.
      #   with:
      #       files: 't-rex*'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
  deb:
    name: Build deb package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-20.04']

    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install libgdal-dev
        run: sudo apt install -y libgdal-dev

      - run: cargo install cargo-deb
      - run: cargo deb
      - run: dpkg -I target/debian/t-rex_*.deb
      - run: dpkg -c target/debian/t-rex_*.deb

  # See also https://github.com/FedericoPonzi/rust-ci/blob/master/.github/workflows/CI.yml

  #   # Build Docker container
  #   cd $src/packaging/docker
  #   cp $src/$CRATE_NAME-$TRAVIS_TAG-$TARGET.deb .
  #   docker build -t sourcepole/t-rex -f Dockerfile .
  #   docker run sourcepole/t-rex --version

  #   docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
  #   docker push sourcepole/t-rex
  #   docker tag sourcepole/t-rex sourcepole/t-rex:${TRAVIS_TAG#v}
  #   docker push sourcepole/t-rex:${TRAVIS_TAG#v}
